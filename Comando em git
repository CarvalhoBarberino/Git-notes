Comando para verificar versão
	git --version

Comando para configurar nome de usuário
	git config --global user.name "CarvalhoBarberino"

Comando para configura o email de usuário
	git config --global user.email "carvalhobarberino1@gmail.com"

Comando para definir um editor de texto. Por padrão já esta definido o vim	
	git config --global core.editor <comando do editor de texto>

Comando para mostrar as configurações do proprio git
	git config --list

Comando para mostrar o status de um repositório
	git status

Comando para iniciar um repositório:
	git init

Comando para adicionar arquivo
	git add 'Comando em git'
	git add .
	git add *

Comando para commitar, dar commit
	git commit -m "Escreva aqui seu comentário"
	Comando para adicionar e commitar ao mesmo tempo
		git commit -am "Escreva aqui seu comentário"

Comando para resetar commits
	Para resetar até o estado do commit de hash 58cbdd69f3d32a171bdffd17aa1f44806547cbca porem no momento em que os arquivos estávam prontos e adicionados na staged para o proximo commit
		git reset --soft "58cbdd69f3d32a171bdffd17aa1f44806547cbca"
	Para resetar até o estado do commit de hash 58cbdd69f3d32a171bdffd17aa1f44806547cbca porem no momento em que os arquivos estavam editados para o proximo commit mas não adicionados na staged
		git reset --mixed "58cbdd69f3d32a171bdffd17aa1f44806547cbca"
	Para resetar até o estado do commit de hash 58cbdd69f3d32a171bdffd17aa1f44806547cbca
		git reset --hard "58cbdd69f3d32a171bdffd17aa1f44806547cbca"
	Para resetar até um ponto antes do merge
		git reset --merge

Comando para reverter um commit. Este comando cria um novo commit que volta no penultimo estado do repósitório.
	git revert 4c2d186928b42b4cebce2b63eac9ab412a338b0a

Comando para criar uma tag onde o argumento -a indica o numero da versão e o argumento -m indica uma mensagem
	git tag -a 1.0.0 -m "Digite aqui sua mensagem"

	Comando para apagar uma tag localmente (este comando não apaga as tags do repositório remoto)
		git tag -d 1.0.0

	Comando para apagar uma tag do repositorio remoto
		git push origin :1.0.0

Comando para verificar a evolução do repositório
	git log
		Se a lista estiver muito comprida digite 'q' para sair
	Mostra os 3 ultimos commits
		git log -3
	Mostra apenas os primeiros digitos de cada hash
		git log --pretty=format:"%h"
	Mostra todos os commits de um determinado autor
		git log --author="CarvalhoBarberino"
	Mostra lista de commits
		git shortlog
		git shortlog -sn
	Mostra grafo
		git log --graph
	Pesquisa detalhes do commit pelo hash
		git show 17aa1f448d06547cbcad69f3d58cb32a171bdffd
	Mostra as alteraçoes antes de commitar. Recomendado antes de fazer commit
		git diff
		git diff --name-only

Comando para trazer o arquivo ao estado do ultimo commit ou do ultimo add
	git checkout 'Comando em git'

Comando para tornar o repositorio como era após um determinado commit
	git checkout dd79fcbf174bf882a29b52c1713cd6fe48

Comando para criar um branch
	git checkout -b 'branchTeste'

	Comando para deletar um branch
		git branch -D 'nome do branch'

	Comando para deletar um branch remoto
		git push origin :teste

	Comando para mudar o nome de um branch
		git branch -m <old-name> <new-name>

	Mostrar os branchs	
		git branch

	Mudar para um branch
		git checkout 'nome do branch'

Comando para resetar o add
	git reset HEAD 'Nome do arquivo'

Comando para remover arquivo
	git rm 'Comando em git~'
	git rm main.cpp

	Comando para remover arquivos com tio de todas as pastas
		git rm */*~

Comando para clonar um repositório remoto
	git clone https://github.com/CarvalhoBarberino/Jogo-Nim.git

Comandos para trabalhar com repositório remoto
	Definir um repositorio remoto. A palavra "origin" é o nome de referencia do repósitório remoto, poderia escolher outro nome de referencia se eu quisesse, por exemplo "repFalso"
		git remote add origin https://github.com/CarvalhoBarberino/Git-notes.git
		git remote add repFalso https://blablabla.com/blublublu.git

	Mostrar os nomes de referencia dos repositórios remotos associados ao repositório atual
		git remote

	Ver opções de comando sobre o repositório escolhido
		git remote origin

	Ver os endereços de busca (fetche, pull) e de envio (push)
		git remote -v

	Enviar para o repositório remoto
		git push

	Envia as tags para o repositório remoto
		git push origin master --tags

	Enviar para o repositório remoto e sobrescrever o repositório anterior. (CUIDADO ao usar este comando. Ele destroi a versão remota do repositório)
		git push -f
		git push --set-upstream origin master
	
	Baixar atualizações do repositório remoto
		git pull origin master

Comando para fazer um merge entre o branch atual e o branch teste1
	git merge teste1

O problema do "HEAD detached from"
	Este problema ocorre quando usamos o comando checkout que acaba mudando o ponteiro HEAD para
	um commit diferente do atual de maneira que um dos commites validos fica sem referencia e somente
	pode ser encontrado atravez de seu hash.
	Isso pode se tornar um problema pois branch sem referencia nunca são listados no comando "git log"
	
	A solução pode ser um pouco arriscada pois pode se deletar o acesso a um branch.
	Soh use sete método se vc tiver certeza que não vai deletar um branch e se arrepender depois.
	Temos que fazer o estado atual se tornar o branch master.
	Mas se o ponteiro master já existir então teremos que apaga-lo e faze-lo de novo apontando para o estado atual.
	usando o comando abaixo:
		git branch -D master
	Depois disso faça o estado atual se chamar master usando o comando abaixo:
		git checkout -b master
		git status
	
	Existe outro jeito menos arriscado de se resolver este problema mas é mais complicado.
	Vc precisa inventar um nomeAuxiliar1 para o branch atual usando o comando:
		git checkout -b nomeAuxiliar1
	Depois vc precisa ir até o estado master usando o comando:
		git checkout master
	Depois criar um outro ponteiro que tambem aponta para o estado atual usando o comando:
		git checkout -b nomeAuxiliar2
	Repare que neste ponto do processo temos dois ponteiros apontando para o mesmo estado.
	O nomeAuxiliar2 e master apontam para o mesmo estado então não vamos perder nada se deletarmos o master
	Depois vc passa para o estado nomeAuxiliar2 usando o comando:
		git checkout nomeAuxiliar2
	Depois vc deleta o ponteiro master usando o comando:
		git branch -D master
	Depois vc precisa voltar ao branch de nomeAuxiliar1 e tornar este branch o master usando os comandos:
		git checkout nomeAuxiliar1
		git checkout -b master
		git branch -D nomeAuxiliar1
		git status
	Depois vc decide se quer apagar ou não o outro branch.
